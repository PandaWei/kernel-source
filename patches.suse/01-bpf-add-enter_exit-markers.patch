From: Dave Hansen <dave.hansen@linux.intel.com>
Subject:  bpf: add enter/exit markers
Patch-mainline: Not yet, work in progress
References: bsc#1087082 CVE-2018-3639

BPF code is often supplied from outside the kernel.  While it can
be programmatically verified, it is very difficult to verify
potential effects from speculative execution.

This patch adds some marker functions as BFP code is entered or
exited.  These serve only a stubs for now.

There are many possibilities for optimization.  The BFP programs
that run on devices, for instance, are less likely to need any
CPU-based mitigations.  These patches are an entirely unoptimized
first pass.

Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
Cc: Andi Kleen <ak@linux.intel.com>
Cc: Tim Chen <tim.c.chen@linux.intel.com>
Signed-off-by: Jiri Kosina <jkosina@suse.cz>
---
 include/linux/filter.h |   18 +++++++++++++++++-
 1 file changed, 17 insertions(+), 1 deletion(-)

--- a/include/linux/filter.h
+++ b/include/linux/filter.h
@@ -348,8 +348,24 @@ struct sk_filter {
 	struct bpf_prog	*prog;
 };
 
-#define BPF_PROG_RUN(filter, ctx)  (*filter->bpf_func)(ctx, filter->insnsi)
+static inline void bpf_enter_prog(const struct bpf_prog *fp)
+{
+}
+
+static inline void bpf_leave_prog(const struct bpf_prog *fp)
+{
+}
 
+#define BPF_PROG_RUN(filter, ctx)  ({				\
+	int __ret;						\
+								\
+	bpf_enter_prog(filter);					\
+	__ret = (*(filter)->bpf_func)(ctx, (filter)->insnsi);	\
+	bpf_leave_prog(filter);					\
+								\
+	__ret;							\
+})
+ 
 static inline u32 bpf_prog_run_save_cb(const struct bpf_prog *prog,
 				       struct sk_buff *skb)
 {
