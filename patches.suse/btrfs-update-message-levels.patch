From: David Sterba <dsterba@suse.cz>
Date: Tue, 06 Mar 2012 00:06:18 +0100
Patch-mainline: No, this is a divergent version
References: FATE#306586
Subject: [PATCH] Btrfs: update message levels

Signed-off-by: David Sterba <dsterba@suse.cz>
---
 fs/btrfs/compression.c      |    2 +-
 fs/btrfs/disk-io.c          |   16 ++++++++--------
 fs/btrfs/extent-tree.c      |    6 +++---
 fs/btrfs/free-space-cache.c |    5 +++--
 fs/btrfs/inode.c            |    6 +++---
 fs/btrfs/root-tree.c        |    2 +-
 6 files changed, 19 insertions(+), 18 deletions(-)

--- a/fs/btrfs/compression.c
+++ b/fs/btrfs/compression.c
@@ -414,7 +414,7 @@ int btrfs_submit_compressed_write(struct
 			bio_add_page(bio, page, PAGE_CACHE_SIZE, 0);
 		}
 		if (bytes_left < PAGE_CACHE_SIZE) {
-			printk("bytes left %lu compress len %lu nr %lu\n",
+			printk(KERN_DEBUG "bytes left %lu compress len %lu nr %lu\n",
 			       bytes_left, cb->compressed_len, cb->nr_pages);
 		}
 		bytes_left -= PAGE_CACHE_SIZE;
--- a/fs/btrfs/disk-io.c
+++ b/fs/btrfs/disk-io.c
@@ -298,7 +298,7 @@ static int csum_tree_block(struct btrfs_
 			memcpy(&found, result, csum_size);
 
 			read_extent_buffer(buf, &val, 0, csum_size);
-			printk_ratelimited(KERN_INFO "btrfs: %s checksum verify "
+			printk_ratelimited(KERN_WARNING "btrfs: %s checksum verify "
 				       "failed on %llu wanted %X found %X "
 				       "level %d\n",
 				       root->fs_info->sb->s_id,
@@ -342,7 +342,7 @@ static int verify_parent_transid(struct
 		ret = 0;
 		goto out;
 	}
-	printk_ratelimited("parent transid verify failed on %llu wanted %llu "
+	printk_ratelimited(KERN_WARNING "btrfs: parent transid verify failed on %llu wanted %llu "
 		       "found %llu\n",
 		       (unsigned long long)eb->start,
 		       (unsigned long long)parent_transid,
@@ -610,7 +610,7 @@ static int btree_readpage_end_io_hook(st
 
 	found_start = btrfs_header_bytenr(eb);
 	if (found_start != eb->start) {
-		printk_ratelimited(KERN_INFO "btrfs bad tree block start "
+		printk_ratelimited(KERN_WARNING "btrfs bad tree block start "
 			       "%llu %llu\n",
 			       (unsigned long long)found_start,
 			       (unsigned long long)eb->start);
@@ -618,7 +618,7 @@ static int btree_readpage_end_io_hook(st
 		goto err;
 	}
 	if (check_tree_block_fsid(root, eb)) {
-		printk_ratelimited(KERN_INFO "btrfs bad fsid on block %llu\n",
+		printk_ratelimited(KERN_WARNING "btrfs bad fsid on block %llu\n",
 			       (unsigned long long)eb->start);
 		ret = -EIO;
 		goto err;
@@ -2665,13 +2665,13 @@ retry_root_backup:
 
 	ret = btrfs_init_space_info(fs_info);
 	if (ret) {
-		printk(KERN_ERR "Failed to initial space info: %d\n", ret);
+		printk(KERN_ERR "btrfs: Failed to initial space info: %d\n", ret);
 		goto fail_block_groups;
 	}
 
 	ret = btrfs_read_block_groups(extent_root);
 	if (ret) {
-		printk(KERN_ERR "Failed to read block groups: %d\n", ret);
+		printk(KERN_ERR "btrfs: Failed to read block groups: %d\n", ret);
 		goto fail_block_groups;
 	}
 	fs_info->num_tolerated_disk_barrier_failures =
@@ -2898,7 +2898,7 @@ static void btrfs_end_buffer_write_sync(
 		struct btrfs_device *device = (struct btrfs_device *)
 			bh->b_private;
 
-		printk_ratelimited_in_rcu(KERN_WARNING "lost page write due to "
+		printk_ratelimited_in_rcu(KERN_WARNING "btrfs: lost page write due to "
 					  "I/O error on %s\n",
 					  rcu_str_deref(device->name));
 		/* note, we dont' set_buffer_write_io_error because we have
@@ -3666,7 +3666,7 @@ int btrfs_destroy_delayed_refs(struct bt
 	spin_lock(&delayed_refs->lock);
 	if (delayed_refs->num_entries == 0) {
 		spin_unlock(&delayed_refs->lock);
-		printk(KERN_INFO "delayed_refs has NO entry\n");
+		printk(KERN_DEBUG "btrfs: delayed_refs has NO entry\n");
 		return ret;
 	}
 
--- a/fs/btrfs/extent-tree.c
+++ b/fs/btrfs/extent-tree.c
@@ -3654,7 +3654,7 @@ static void check_system_chunk(struct bt
 			btrfs_calc_trunc_metadata_size(root, 1);
 
 	if (left < thresh && btrfs_test_opt(root, ENOSPC_DEBUG)) {
-		btrfs_info(root->fs_info, "left=%llu, need=%llu, flags=%llu",
+		btrfs_debug(root->fs_info, "left=%llu, need=%llu, flags=%llu",
 			left, thresh, type);
 		dump_space_info(info, 0, 0);
 	}
--- a/fs/btrfs/inode.c
+++ b/fs/btrfs/inode.c
@@ -2849,7 +2849,7 @@ good:
 
 zeroit:
 	if (__ratelimit(&_rs))
-		btrfs_info(root->fs_info, "csum failed ino %llu off %llu csum %u private %llu",
+		btrfs_warn(root->fs_info, "csum failed ino %llu off %llu csum %u private %llu",
 			(unsigned long long)btrfs_ino(page->mapping->host),
 			(unsigned long long)start, csum,
 			(unsigned long long)private);
@@ -3270,7 +3270,7 @@ int btrfs_orphan_cleanup(struct btrfs_ro
 
 out:
 	if (ret)
-		btrfs_crit(root->fs_info,
+		btrfs_err(root->fs_info,
 			"could not do orphan cleanup %d", ret);
 	btrfs_free_path(path);
 	return ret;
@@ -4521,7 +4521,7 @@ void btrfs_evict_inode(struct inode *ino
 			ret = btrfs_block_rsv_migrate(global_rsv, rsv, min_size);
 
 		if (ret) {
-			btrfs_warn(root->fs_info,
+			btrfs_info(root->fs_info,
 				"Could not get space for a delete, will truncate on mount %d",
 				ret);
 			btrfs_orphan_del(NULL, inode);
 			btrfs_free_block_rsv(root, rsv);
--- a/fs/btrfs/root-tree.c
+++ b/fs/btrfs/root-tree.c
@@ -148,7 +148,7 @@ int btrfs_update_root(struct btrfs_trans
 
 	if (ret != 0) {
 		btrfs_print_leaf(root, path->nodes[0]);
-		printk(KERN_CRIT "unable to update root key %llu %u %llu\n",
+		printk(KERN_CRIT "btrfs: unable to update root key %llu %u %llu\n",
 		       (unsigned long long)key->objectid, key->type,
 		       (unsigned long long)key->offset);
 		BUG_ON(1);
