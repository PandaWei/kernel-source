From: Jiri Kosina <jkosina@suse.cz>
Subject: [PATCH] x86/traps: Fix bad_iret_stack in fixup_bad_iret()
Patch-mainline: never, different implementation
References: bsc#1098658

With PTI and trampoline entry stack in place, we need to return to the
entry stack while fixing up bad iret to userspace, otherwise we end
up in #GP with CR3 already switched, but still running on thread stack
(as that's what task_pt_regs() gives us).

Signed-off-by: Jiri Kosina <jkosina@suse.cz>
---
 arch/x86/kernel/traps.c |    3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

--- a/arch/x86/kernel/traps.c
+++ b/arch/x86/kernel/traps.c
@@ -587,8 +587,7 @@ struct bad_iret_stack *fixup_bad_iret(st
 	 * iret target.
 	 */
 	struct bad_iret_stack *new_stack =
-		container_of(task_pt_regs(current),
-			     struct bad_iret_stack, regs);
+		(struct bad_iret_stack *)this_cpu_read(init_tss.x86_tss.sp0) - 1;
 
 	/* Copy the IRET target to the new stack. */
 	memmove(&new_stack->regs.ip, (void *)s->regs.sp, 5*8);
