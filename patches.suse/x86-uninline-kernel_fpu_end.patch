From: Jiri Slaby <jslaby@suse.cz>
Subject: x86: uninline kernel_fpu_end
Patch-mainline: 3.4-rc1
Git-commit: 8546c008924d5fd1724fa698eaa92b414bafd50d (partial)
References: bnc#1087086 CVE-2018-3665

This is a fix for:
patches.suse/x86-non-upstream-eager-fpu.patch

The patch added a call of math_state_restore to kernel_fpu_end.
Since kernel_fpu_end is an inline function and math_state_restore is
exported only to GPL modules, some modules (like fglrx) can no longer link
against the kernel with the eager FPU fix.

So do the same as upstream does -- make a standard function from
kernel_fpu_end and export it by EXPORT_SYMBOL.

Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 arch/x86/include/asm/i387.h |    9 +--------
 arch/x86/kernel/i387.c      |    9 +++++++++
 2 files changed, 10 insertions(+), 8 deletions(-)

--- a/arch/x86/include/asm/i387.h
+++ b/arch/x86/include/asm/i387.h
@@ -33,6 +33,7 @@ extern int init_fpu(struct task_struct *
 extern void math_state_restore(void);
 extern int dump_fpu(struct pt_regs *, struct user_i387_struct *);
 void fpu__init_parse_early_param(void);
+void __kernel_fpu_end(void);
 
 extern user_regset_active_fn fpregs_active, xfpregs_active;
 extern user_regset_get_fn fpregs_get, xfpregs_get, fpregs_soft_get,
@@ -519,14 +520,6 @@ static inline void __kernel_fpu_begin(vo
 		clts();
 }
 
-static inline void __kernel_fpu_end(void)
-{
-	if (use_eager_fpu())
-		math_state_restore();
-	else
-		stts();
-}
-
 static inline void kernel_fpu_begin(void)
 {
 	WARN_ON_ONCE(!irq_fpu_usable());
--- a/arch/x86/kernel/i387.c
+++ b/arch/x86/kernel/i387.c
@@ -293,6 +293,15 @@ int xstateregs_set(struct task_struct *t
 	return ret;
 }
 
+void __kernel_fpu_end(void)
+{
+	if (use_eager_fpu())
+		math_state_restore();
+	else
+		stts();
+}
+EXPORT_SYMBOL(__kernel_fpu_end);
+
 #if defined CONFIG_X86_32 || defined CONFIG_IA32_EMULATION
 
 /*
