Subject: hv: preserve kabi by keeping hv_do_hypercall
From: <ohering@suse.de>
Patch-mainline: Never, this change is just for SLE12SP3
References: bnc#1082632

--- a/arch/x86/hyperv/hv_init.c
+++ b/arch/x86/hyperv/hv_init.c
@@ -171,6 +171,12 @@ void hyperv_cleanup(void)
 }
 EXPORT_SYMBOL_GPL(hyperv_cleanup);
 
+u64 hv_do_hypercall(u64 control, void *input, void *output)
+{
+	return suse_hv_do_hypercall(control, input, output);
+}
+EXPORT_SYMBOL_GPL(hv_do_hypercall);
+
 void hyperv_report_panic(struct pt_regs *regs, long err)
 {
 	static bool panic_reported;
--- a/arch/x86/include/asm/mshyperv.h
+++ b/arch/x86/include/asm/mshyperv.h
@@ -172,7 +172,10 @@ void hv_remove_crash_handler(void);
 extern void *hv_hypercall_pg;
 extern void  __percpu  **hyperv_pcpu_input_arg;
 
-static inline u64 hv_do_hypercall(u64 control, void *input, void *output)
+/* Preserve kABI by keeping the stale hv_do_hypercall() function */
+u64 hv_do_hypercall(u64 control, void *input, void *output);
+
+static inline u64 suse_hv_do_hypercall(u64 control, void *input, void *output)
 {
 	u64 input_address = input ? virt_to_phys(input) : 0;
 	u64 output_address = output ? virt_to_phys(output) : 0;
--- a/drivers/hv/hv.c
+++ b/drivers/hv/hv.c
@@ -83,7 +83,7 @@ int hv_post_message(union hv_connection_
 	aligned_msg->payload_size = payload_size;
 	memcpy((void *)aligned_msg->payload, payload, payload_size);
 
-	status = hv_do_hypercall(HVCALL_POST_MESSAGE, aligned_msg, NULL);
+	status = suse_hv_do_hypercall(HVCALL_POST_MESSAGE, aligned_msg, NULL);
 
 	/* Preemption must remain disabled until after the hypercall
 	 * so some other thread can't get scheduled onto this cpu and
--- a/drivers/pci/host/pci-hyperv.c
+++ b/drivers/pci/host/pci-hyperv.c
@@ -990,7 +990,7 @@ static void hv_irq_unmask(struct irq_dat
 		}
 	}
 
-	res = hv_do_hypercall(HVCALL_RETARGET_INTERRUPT | (var_size << 17),
+	res = suse_hv_do_hypercall(HVCALL_RETARGET_INTERRUPT | (var_size << 17),
 			      params, NULL);
 
 exit_unlock:
