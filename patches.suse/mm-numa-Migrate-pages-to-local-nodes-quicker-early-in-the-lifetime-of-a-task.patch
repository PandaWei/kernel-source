From adc7b52d9095562099761cbda68fdaa00a05116e Mon Sep 17 00:00:00 2001
From: Mel Gorman <mgorman@suse.de>
Date: Tue, 19 Jun 2018 11:25:43 +0100
Subject: [PATCH] mm, numa: Migrate pages to local nodes quicker early in the
 lifetime of a task

References: bnc#1101669 optimise numa balancing for fast migrate
Patch-mainline: No, queued in subsystem maintainer tree

Automatic NUMA Balancing uses a multi-stage pass to decide whether a page should
migrate locally or not. This is important for shared pages or for an accessing
thread that migrates cross-node frequently.

Threads inherit both page tables and the preferred node ID from the parent. This
means that threads can trigger hinting faults earlier than a new task which delays
scanning for a number of seconds. As it can be load balanced very early in its
lifetime there can be an unnecessary delay before it starts migrating thread-local
data.

This patch migrates private pages faster early in the lifetime of a thread using
the sequence counter as an identifier of new tasks.

Signedo-off-by: Mel Gorman <mgorman@suse.de>
---
 kernel/sched/fair.c | 12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)

diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index 8c11af48fa6a..af18a8d735fb 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -1420,6 +1420,17 @@ bool should_numa_migrate_memory(struct task_struct *p, struct page * page,
 	int last_cpupid, this_cpupid;
 
 	this_cpupid = cpu_pid_to_cpupid(dst_cpu, current->pid);
+	last_cpupid = page_cpupid_xchg_last(page, this_cpupid);
+
+	/*
+	 * Allow first faults or private faults to migrate immediately early in
+	 * the lifetime of a task. The magic number 4 is based on waiting for
+	 * two full passes of the "multi-stage node selection" test that is
+	 * executed below.
+	 */
+	if ((p->numa_preferred_nid == -1 || p->numa_scan_seq <= 4) &&
+	    (cpupid_pid_unset(last_cpupid) || cpupid_match_pid(p, last_cpupid)))
+		return true;
 
 	/*
 	 * Multi-stage node selection is used in conjunction with a periodic
@@ -1438,7 +1449,6 @@ bool should_numa_migrate_memory(struct task_struct *p, struct page * page,
 	 * This quadric squishes small probabilities, making it less likely we
 	 * act on an unlikely task<->page relation.
 	 */
-	last_cpupid = page_cpupid_xchg_last(page, this_cpupid);
 	if (!cpupid_pid_unset(last_cpupid) &&
 				cpupid_to_nid(last_cpupid) != dst_nid)
 		return false;
