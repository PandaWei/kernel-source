From: Jiri Slaby <jslaby@suse.cz>
Date: Fri, 18 May 2018 14:13:26 +0200
Subject: Revert "mac80211: allow same PN for AMSDU sub-frames"
Patch-mainline: never, kabi
References: kabi

This reverts commit 6de1fabb6cbcf3203e4dc831c230ef23df0c0079, upstream
commit f631a77ba920f7153a1094d09cd8f2ebbffd0328. It depends on other
commits which are being reverted due to kABI breakage.

Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 include/net/mac80211.h |  6 +-----
 net/mac80211/wpa.c     | 16 ++++------------
 2 files changed, 5 insertions(+), 17 deletions(-)

diff --git a/include/net/mac80211.h b/include/net/mac80211.h
index 41a87405bfb7..65c64bc1b727 100644
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -1031,9 +1031,6 @@ ieee80211_tx_info_clear_status(struct ieee80211_tx_info *info)
  * @RX_FLAG_RADIOTAP_VENDOR_DATA: This frame contains vendor-specific
  *	radiotap data in the skb->data (before the frame) as described by
  *	the &struct ieee80211_vendor_radiotap.
- * @RX_FLAG_ALLOW_SAME_PN: Allow the same PN as same packet before.
- *	This is used for AMSDU subframes which can have the same PN as
- *	the first subframe.
  */
 enum mac80211_rx_flags {
 	RX_FLAG_MMIC_ERROR		= BIT(0),
@@ -1064,8 +1061,7 @@ enum mac80211_rx_flags {
 	RX_FLAG_5MHZ			= BIT(29),
 	RX_FLAG_AMSDU_MORE		= BIT(30),
 	RX_FLAG_RADIOTAP_VENDOR_DATA	= BIT(31),
-	RX_FLAG_MIC_STRIPPED		= BIT_ULL(32),
-	RX_FLAG_ALLOW_SAME_PN		= BIT_ULL(33),
+	RX_FLAG_MIC_STRIPPED            = BIT_ULL(32),
 };
 
 #define RX_FLAG_STBC_SHIFT		26
diff --git a/net/mac80211/wpa.c b/net/mac80211/wpa.c
index c0567a866fdd..b09072749499 100644
--- a/net/mac80211/wpa.c
+++ b/net/mac80211/wpa.c
@@ -523,16 +523,12 @@ ieee80211_crypto_ccmp_decrypt(struct ieee80211_rx_data *rx,
 		return RX_DROP_UNUSABLE;
 
 	if (!(status->flag & RX_FLAG_PN_VALIDATED)) {
-		int res;
-
 		ccmp_hdr2pn(pn, skb->data + hdrlen);
 
 		queue = rx->security_idx;
 
-		res = memcmp(pn, key->u.ccmp.rx_pn[queue],
-			     IEEE80211_CCMP_PN_LEN);
-		if (res < 0 ||
-		    (!res && !(status->flag & RX_FLAG_ALLOW_SAME_PN))) {
+		if (memcmp(pn, key->u.ccmp.rx_pn[queue],
+			   IEEE80211_CCMP_PN_LEN) <= 0) {
 			key->u.ccmp.replays++;
 			return RX_DROP_UNUSABLE;
 		}
@@ -753,16 +749,12 @@ ieee80211_crypto_gcmp_decrypt(struct ieee80211_rx_data *rx)
 		return RX_DROP_UNUSABLE;
 
 	if (!(status->flag & RX_FLAG_PN_VALIDATED)) {
-		int res;
-
 		gcmp_hdr2pn(pn, skb->data + hdrlen);
 
 		queue = rx->security_idx;
 
-		res = memcmp(pn, key->u.gcmp.rx_pn[queue],
-			     IEEE80211_GCMP_PN_LEN);
-		if (res < 0 ||
-		    (!res && !(status->flag & RX_FLAG_ALLOW_SAME_PN))) {
+		if (memcmp(pn, key->u.gcmp.rx_pn[queue],
+			   IEEE80211_GCMP_PN_LEN) <= 0) {
 			key->u.gcmp.replays++;
 			return RX_DROP_UNUSABLE;
 		}
-- 
2.16.3

