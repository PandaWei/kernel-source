From: Jiri Slaby <jslaby@suse.cz>
Date: Wed, 22 Aug 2018 10:46:44 +0200
Subject: Revert "vsock: split dwork to avoid reinitializations"
Patch-mainline: never, kabi
References: kabi

This reverts commit 62209d1f272c2b134765301f279fda7364b07ddd, upstream
commit 455f05ecd2b219e9a216050796d30c830d9bc393. It adds one member to
struct vsock_sock, but this structure (and its size) can be used in
external modules. So avoid breaking kABI this way.

Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 include/net/af_vsock.h         |    4 ++--
 net/vmw_vsock/af_vsock.c       |   15 +++++++--------
 net/vmw_vsock/vmci_transport.c |    3 ++-
 3 files changed, 11 insertions(+), 11 deletions(-)

--- a/include/net/af_vsock.h
+++ b/include/net/af_vsock.h
@@ -62,8 +62,7 @@ struct vsock_sock {
 	struct list_head pending_links;
 	struct list_head accept_queue;
 	bool rejected;
-	struct delayed_work connect_work;
-	struct delayed_work pending_work;
+	struct delayed_work dwork;
 	u32 peer_shutdown;
 	bool sent_request;
 	bool ignore_connecting_rst;
@@ -74,6 +73,7 @@ struct vsock_sock {
 
 s64 vsock_stream_has_data(struct vsock_sock *vsk);
 s64 vsock_stream_has_space(struct vsock_sock *vsk);
+void vsock_pending_work(struct work_struct *work);
 struct sock *__vsock_create(struct net *net,
 			    struct socket *sock,
 			    struct sock *parent,
--- a/net/vmw_vsock/af_vsock.c
+++ b/net/vmw_vsock/af_vsock.c
@@ -430,14 +430,14 @@ static int vsock_send_shutdown(struct so
 	return transport->shutdown(vsock_sk(sk), mode);
 }
 
-static void vsock_pending_work(struct work_struct *work)
+void vsock_pending_work(struct work_struct *work)
 {
 	struct sock *sk;
 	struct sock *listener;
 	struct vsock_sock *vsk;
 	bool cleanup;
 
-	vsk = container_of(work, struct vsock_sock, pending_work.work);
+	vsk = container_of(work, struct vsock_sock, dwork.work);
 	sk = sk_vsock(vsk);
 	listener = vsk->listener;
 	cleanup = true;
@@ -477,6 +477,7 @@ out:
 	sock_put(sk);
 	sock_put(listener);
 }
+EXPORT_SYMBOL_GPL(vsock_pending_work);
 
 /**** SOCKET OPERATIONS ****/
 
@@ -575,8 +576,6 @@ static int __vsock_bind(struct sock *sk,
 	return retval;
 }
 
-static void vsock_connect_timeout(struct work_struct *work);
-
 struct sock *__vsock_create(struct net *net,
 			    struct socket *sock,
 			    struct sock *parent,
@@ -619,8 +618,6 @@ struct sock *__vsock_create(struct net *
 	vsk->sent_request = false;
 	vsk->ignore_connecting_rst = false;
 	vsk->peer_shutdown = 0;
-	INIT_DELAYED_WORK(&vsk->connect_work, vsock_connect_timeout);
-	INIT_DELAYED_WORK(&vsk->pending_work, vsock_pending_work);
 
 	psk = parent ? vsock_sk(parent) : NULL;
 	if (parent) {
@@ -1097,7 +1094,7 @@ static void vsock_connect_timeout(struct
 	struct sock *sk;
 	struct vsock_sock *vsk;
 
-	vsk = container_of(work, struct vsock_sock, connect_work.work);
+	vsk = container_of(work, struct vsock_sock, dwork.work);
 	sk = sk_vsock(vsk);
 
 	lock_sock(sk);
@@ -1198,7 +1195,9 @@ static int vsock_stream_connect(struct s
 			 * timeout fires.
 			 */
 			sock_hold(sk);
-			schedule_delayed_work(&vsk->connect_work, timeout);
+			INIT_DELAYED_WORK(&vsk->dwork,
+					  vsock_connect_timeout);
+			schedule_delayed_work(&vsk->dwork, timeout);
 
 			/* Skip ahead to preserve error code set above. */
 			goto out_wait;
--- a/net/vmw_vsock/vmci_transport.c
+++ b/net/vmw_vsock/vmci_transport.c
@@ -1099,7 +1099,8 @@ static int vmci_transport_recv_listen(st
 	vpending->listener = sk;
 	sock_hold(sk);
 	sock_hold(pending);
-	schedule_delayed_work(&vpending->pending_work, HZ);
+	INIT_DELAYED_WORK(&vpending->dwork, vsock_pending_work);
+	schedule_delayed_work(&vpending->dwork, HZ);
 
 out:
 	return err;
