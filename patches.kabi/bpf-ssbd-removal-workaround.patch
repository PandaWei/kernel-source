From: Jiri Kosina <jkosina@suse.cz>
Subject: kABI: work around BPF SSBD removal
Patch-mainline: Never, SUSE-specific
References: bsc#1087082

Add dummy symbols for the ones we lost after removing the temporary
BPF SSBD implementation. No module could have realistically depended
on them.

Signed-off-by: Jiri Kosina <jkosina@suse.cz>
---
 arch/x86/kernel/cpu/bugs.c |    5 +++++
 include/linux/filter.h     |    2 ++
 net/core/filter.c          |    8 ++++++++
 3 files changed, 15 insertions(+)

--- a/arch/x86/kernel/cpu/bugs.c
+++ b/arch/x86/kernel/cpu/bugs.c
@@ -194,6 +194,11 @@ x86_virt_spec_ctrl(u64 guest_spec_ctrl,
 }
 EXPORT_SYMBOL_GPL(x86_virt_spec_ctrl);
 
+void x86_sync_spec_ctrl(void)
+{
+}
+EXPORT_SYMBOL_GPL(x86_sync_spec_ctrl);
+
 static void x86_amd_ssb_disable(void)
 {
 	u64 msrval = x86_amd_ls_cfg_base | x86_amd_ls_cfg_ssbd_mask;
--- a/include/linux/filter.h
+++ b/include/linux/filter.h
@@ -469,6 +469,8 @@ bool bpf_helper_changes_skb_data(void *f
 struct bpf_prog *bpf_patch_insn_single(struct bpf_prog *prog, u32 off,
 				       const struct bpf_insn *patch, u32 len);
 
+DECLARE_PER_CPU(unsigned int, bpf_prog_ran);
+
 #ifdef CONFIG_BPF_JIT
 typedef void (*bpf_jit_fill_hole_t)(void *area, unsigned int size);
 
--- a/net/core/filter.c
+++ b/net/core/filter.c
@@ -31,6 +31,7 @@
 #include <linux/netdevice.h>
 #include <linux/if_packet.h>
 #include <linux/gfp.h>
+#include <linux/nospec.h>
 #include <net/ip.h>
 #include <net/protocol.h>
 #include <net/netlink.h>
@@ -1999,3 +2000,10 @@ out:
 	release_sock(sk);
 	return ret;
 }
+
+DEFINE_PER_CPU(unsigned int, bpf_prog_ran);
+EXPORT_SYMBOL_GPL(bpf_prog_ran);
+void bpf_leave_prog_deferred(const struct bpf_prog *fp)
+{
+}
+EXPORT_SYMBOL_GPL(bpf_leave_prog_deferred);
