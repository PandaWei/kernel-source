From: Andi Kleen <ak@linux.intel.com>
Date: Thu, 3 May 2018 16:39:51 -0700
Subject: [PATCH 8/8] xen: mm, l1tf: Disallow non privileged high MMIO PROT_NONE
 mappings
Patch-mainline: Never, SUSE-Xen specific
References: bnc#1087081, CVE-2018-3620

mhocko@suse.com:
we do not have boot_cpu_has_bug(X86_BUG_L1TF) so replace the call by
arch_has_pfn_modify_check which is implemented in bug.c which can see
the global x86_bug_l1tf variable.
We also do not have test_walk in the page walk code yet. prot_none_walk
needs it because we do want to check VM_PFNMAP vmas. Backport a minimalistic
part of the test_walk and use it.

For L1TF PROT_NONE mappings are protected by inverting the PFN in the
page table entry. This sets the high bits in the CPU's address space,
thus making sure to point to not point an unmapped entry to valid
cached memory.

Some server system BIOS put the MMIO mappings high up in the physical
address space. If such an high mapping was mapped to an unprivileged
user they could attack low memory by setting such a mapping to
PROT_NONE. This could happen through a special device driver
which is not access protected. Normal /dev/mem is of course
access protect.

To avoid this we forbid PROT_NONE mappings or mprotect for high MMIO
mappings.

Valid page mappings are allowed because the system is then unsafe
anyways.

We don't expect users to commonly use PROT_NONE on MMIO. But
to minimize any impact here we only do this if the mapping actually
refers to a high MMIO address (defined as the MAX_PA-1 bit being set),
and also skip the check for root.

For mmaps this is straight forward and can be handled in vm_insert_pfn
and in remap_pfn_range().

For mprotect it's a bit trickier. At the point we're looking at the
actual PTEs a lot of state has been changed and would be difficult
to undo on an error. Since this is a uncommon case we use a separate
early page talk walk pass for MMIO PROT_NONE mappings that
checks for this condition early. For non MMIO and non PROT_NONE
there are no changes.

Signed-off-by: Andi Kleen <ak@linux.intel.com>
Acked-By: Dave Hansen <dave.hansen@intel.com>
Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
Signed-off-by: Michal Hocko <mhocko@suse.com>
Reviewed-by: Vlastimil Babka <vbabka@suse.com>

Automatically created from "patches.arch/x86-l1tf-08-disallow-non-privileged-high-MMIO-PROT_NONE.patch" by xen-port-patches.py

--- a/arch/x86/include/mach-xen/asm/pgtable.h
+++ b/arch/x86/include/mach-xen/asm/pgtable.h
@@ -950,6 +950,11 @@ static inline void ptep_modify_prot_comm
 		BUG();
 }
 
+#define __HAVE_ARCH_PFN_MODIFY_ALLOWED 1
+extern bool pfn_modify_allowed(unsigned long pfn, pgprot_t prot);
+
+extern bool arch_has_pfn_modify_check(void);
+
 #include <asm-generic/pgtable.h>
 
 #include <xen/features.h>
