From: Lidong Zhong <lzhong@suse.com>
Date: Tue, 28 Aug 2018 15:16:55 +0800
Subject: [PATCH]  add kernel parameter to disable failfast on block
 devices
Patch-mainline: Never, not relevant upstream
References: bsc#1081680

To make failfast work with md we needed user-space processes to
be able to send failfast IO requests to block devices.
To do this we changed the behaviour of O_DIRECT io when the
block device was opened with O_NONBLOCK.
Unfortunately this causes other applications to misbehave.
I don't think we can support these applications and
md/failfast at the same time, but we can add a kernel
parameter to allow us to support either one or the other.
With this patch, setting
/sys/module/kernel/parameters/block_dev_failfast
to zero will disable the failfast behaviour.

Acked-by: NeilBrown <neilb@suse.com>
Signed-off-by: Neil Brown <neilb@suse.com>

---
 fs/block_dev.c |   14 ++++++++++++--
 1 file changed, 12 insertions(+), 2 deletions(-)

--- a/fs/block_dev.c
+++ b/fs/block_dev.c
@@ -145,6 +145,16 @@ static void submit_failfast_bio(int rw,
 	submit_bio(rw, bio);
 }
 
+/*
+ * By default, IO to a block device open with O_DIRECT | O_NONBLOCK
+ * will cause a failfast request.  This is only need with
+ * md/raid failfast and some applications can be confused by this
+ * behaviour.  Setting /sys/module/kernel/parameters/block_dev_failfast
+ * to 0 will disable this behaviour.
+ */
+static int block_dev_failfast = 1;
+core_param(block_dev_failfast, block_dev_failfast, int, 0644);
+
 static ssize_t
 blkdev_direct_IO(int rw, struct kiocb *iocb, const struct iovec *iov,
 			loff_t offset, unsigned long nr_segs)
@@ -153,7 +163,7 @@ blkdev_direct_IO(int rw, struct kiocb *i
 	struct inode *inode = file->f_mapping->host;
 	dio_submit_t *submit_io = NULL;
 
-	if (file->f_flags & O_NONBLOCK)
+	if (block_dev_failfast && (file->f_flags & O_NONBLOCK))
 		submit_io = submit_failfast_bio;
 	return __blockdev_direct_IO(rw, iocb, inode, I_BDEV(inode), iov, offset,
 				    nr_segs, blkdev_get_block, NULL, submit_io, 0);
@@ -1496,7 +1506,7 @@ static long block_ioctl(struct file *fil
 	 * O_NDELAY can be altered using fcntl(.., F_SETFL, ..), so we have
 	 * to updated it before every ioctl.
 	 */
-	if (file->f_flags & O_NDELAY)
+	if (block_dev_failfast && (file->f_flags & O_NDELAY))
 		mode |= FMODE_NDELAY;
 	else
 		mode &= ~FMODE_NDELAY;
