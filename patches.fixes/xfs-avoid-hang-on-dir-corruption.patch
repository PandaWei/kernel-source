From: Mark Tinguely <tinguely@sgi.com>
Subject: xfs: avoid xfs_buf hang in lookup node directory corruption
References: bsc#989401
Patch-mainline: v3.10-rc1
Git-commit: d432c80e68e3c283fc9a85021f5b65e0aabf254e
Git-commit: f5ea110044fa858925a880b4fa9f551bfa2dfc38

If the node directory is corrupted with non-node entries,
don't continue reading corrupted entries because the
xfs_buf are not processed and non unlocked causin hang
on second call to lookup.

This patch deals with xfs_da_node_lookup_int operation.
It appears we are not freeing xfs_buf on some callers of
xfs_da_node_lookup_int.

Signed-off-by: Mark Tinguely <tinguely@sgi.com>

Note: In mainline, these two changes are part of two "code
rearrangement" and cleanup commits. *sigh*

Acked-by: Petr Tesarik <ptesarik@suse.com>

diff --git a/fs/xfs/xfs_da_btree.c b/fs/xfs/xfs_da_btree.c
index ba4552f..bbfe8c6 100644
--- a/fs/xfs/xfs_da_btree.c
+++ b/fs/xfs/xfs_da_btree.c
@@ -1074,9 +1074,6 @@ xfs_da_node_lookup_int(xfs_da_state_t *state, int *result)
 		}
 		curr = blk->bp->data;
 		blk->magic = be16_to_cpu(curr->magic);
-		ASSERT(blk->magic == XFS_DA_NODE_MAGIC ||
-		       blk->magic == XFS_DIR2_LEAFN_MAGIC ||
-		       blk->magic == XFS_ATTR_LEAF_MAGIC);
 
 		/*
 		 * Search an intermediate node for a match.
@@ -1134,6 +1131,9 @@ xfs_da_node_lookup_int(xfs_da_state_t *state, int *result)
 		} else if (blk->magic == XFS_DIR2_LEAFN_MAGIC) {
 			blk->hashval = xfs_dir2_leafn_lasthash(blk->bp, NULL);
 			break;
+		} else {
+			ASSERT(0);
+			return XFS_ERROR(EFSCORRUPTED);
 		}
 	}
 

