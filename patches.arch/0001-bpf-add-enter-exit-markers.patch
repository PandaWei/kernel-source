From: Dave Hansen <dave.hansen@linux.intel.com>
Date: Wed, 9 May 2018 20:17:58 +0200
Subject: bpf: add enter/exit markers
Patch-mainline: Not yet, work in progress
References: bsc#1087082 CVE-2018-3639

BPF code is often supplied from outside the kernel.  While it can
be programmatically verified, it is very difficult to verify
potential effects from speculative execution.

This patch adds some marker functions as BFP code is entered or
exited.  These serve only a stubs for now.

There are many possibilities for optimization.  The BFP programs
that run on devices, for instance, are less likely to need any
CPU-based mitigations.  These patches are an entirely unoptimized
first pass.

Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
Cc: Andi Kleen <ak@linux.intel.com>
Cc: Tim Chen <tim.c.chen@linux.intel.com>
Signed-off-by: Joerg Roedel <jroedel@suse.de>
---
 include/linux/filter.h | 22 ++++++++++++++++++++--
 1 file changed, 20 insertions(+), 2 deletions(-)

diff --git a/include/linux/filter.h b/include/linux/filter.h
index c6ca6cff..539635e8 100644
--- a/include/linux/filter.h
+++ b/include/linux/filter.h
@@ -168,10 +168,18 @@ extern int sk_attach_filter(struct sock_fprog *fprog, struct sock *sk);
 extern int sk_detach_filter(struct sock *sk);
 extern int sk_chk_filter(struct sock_filter *filter, int flen);
 
+static inline void bpf_enter_prog(const struct sk_filter *fp)
+{
+}
+
+static inline void bpf_leave_prog(const struct sk_filter *fp)
+{
+}
+
 #ifdef CONFIG_BPF_JIT
 extern void bpf_jit_compile(struct sk_filter *fp);
 extern void bpf_jit_free(struct sk_filter *fp);
-#define SK_RUN_FILTER(FILTER, SKB) (*FILTER->bpf_func)(SKB, FILTER->insns)
+#define __SK_RUN_FILTER(FILTER, SKB) (*FILTER->bpf_func)(SKB, FILTER->insns)
 #else
 static inline void bpf_jit_compile(struct sk_filter *fp)
 {
@@ -179,9 +187,19 @@ static inline void bpf_jit_compile(struct sk_filter *fp)
 static inline void bpf_jit_free(struct sk_filter *fp)
 {
 }
-#define SK_RUN_FILTER(FILTER, SKB) sk_run_filter(SKB, FILTER->insns)
+#define __SK_RUN_FILTER(FILTER, SKB) sk_run_filter(SKB, FILTER->insns)
 #endif
 
+#define SK_RUN_FILTER(FILTER, SKB)  ({				\
+	int __ret;						\
+								\
+	bpf_enter_prog(FILTER);					\
+	__ret = __SK_RUN_FILTER(FILTER, SKB);			\
+	bpf_leave_prog(FILTER);					\
+								\
+	__ret;							\
+})
+
 enum {
 	BPF_S_RET_K = 1,
 	BPF_S_RET_A,
-- 
2.12.3

