From: Martin Schwidefsky <schwidefsky@de.ibm.com>
Subject: s390: move expoline assembler macros to a header
Patch-mainline: v4.17-rc6
Git-commit: 6dd85fbb87d1d6b87a3b1f02ca28d7b2abd2e7ba
References: bnc#1106930, LTC#171029

Description:  kernel: improve spectre mitigation
Symptom:      -
Problem:      The upstream kernel has a few more spectre related updates
              and fixes which are relevant for the various distribution
              targets as well. The most notable improvement is the
              etoken support.
Solution:     Backport upstream patches
Reproduction: -

Upstream-Description:

              s390: move expoline assembler macros to a header

              To be able to use the expoline branches in different assembler
              files move the associated macros from entry.S to a new header
              nospec-insn.h.

              While we are at it make the macros a bit nicer to use.

              Cc: stable@vger.kernel.org # 4.16
              Fixes: f19fbd5ed6 ("s390: introduce execute-trampolines for branches")
              Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>


Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
Acked-by: Johannes Thumshirn <jthumshirn@suse.de>
---
 arch/s390/include/asm/nospec-insn.h |  123 ++++++++++++++++++++++++++++++++++++
 arch/s390/kernel/entry64.S          |   95 +++++----------------------
 2 files changed, 142 insertions(+), 76 deletions(-)

--- /dev/null
+++ b/arch/s390/include/asm/nospec-insn.h
@@ -0,0 +1,123 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _ASM_S390_NOSPEC_ASM_H
+#define _ASM_S390_NOSPEC_ASM_H
+
+#ifdef __ASSEMBLY__
+
+#ifdef CONFIG_EXPOLINE
+
+/*
+ * The expoline macros are used to create thunks in the same format
+ * as gcc generates them. The 'comdat' section flag makes sure that
+ * the various thunks are merged into a single copy.
+ */
+	.macro __THUNK_PROLOG_NAME name
+	.pushsection .text.\name,"axG",@progbits,\name,comdat
+	.globl \name
+	.hidden \name
+	.type \name,@function
+\name:
+	.endm
+
+	.macro __THUNK_EPILOG
+	.popsection
+	.endm
+
+	.macro __THUNK_PROLOG_BR r1,r2
+	__THUNK_PROLOG_NAME __s390x_indirect_jump_r\r2\()use_r\r1
+	.endm
+
+	.macro __THUNK_BR r1,r2
+	jg	__s390x_indirect_jump_r\r2\()use_r\r1
+	.endm
+
+	.macro __THUNK_BRASL r1,r2,r3
+	brasl	\r1,__s390x_indirect_jump_r\r3\()use_r\r2
+	.endm
+
+	.macro	__DECODE_RR expand,reg,ruse
+	.set __decode_fail,1
+	.irp r1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
+	.ifc \reg,%r\r1
+	.irp r2,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
+	.ifc \ruse,%r\r2
+	\expand \r1,\r2
+	.set __decode_fail,0
+	.endif
+	.endr
+	.endif
+	.endr
+	.if __decode_fail == 1
+	.error "__DECODE_RR failed"
+	.endif
+	.endm
+
+	.macro	__DECODE_RRR expand,rsave,rtarget,ruse
+	.set __decode_fail,1
+	.irp r1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
+	.ifc \rsave,%r\r1
+	.irp r2,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
+	.ifc \rtarget,%r\r2
+	.irp r3,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
+	.ifc \ruse,%r\r3
+	\expand \r1,\r2,\r3
+	.set __decode_fail,0
+	.endif
+	.endr
+	.endif
+	.endr
+	.endif
+	.endr
+	.if __decode_fail == 1
+	.error "__DECODE_RRR failed"
+	.endif
+	.endm
+
+	.macro __THUNK_EX_BR reg,ruse
+#ifdef CONFIG_HAVE_MARCH_Z10_FEATURES
+	exrl	0,555f
+	j	.
+#else
+	larl	\ruse,555f
+	ex	0,0(\ruse)
+	j	.
+#endif
+555:	br	\reg
+	.endm
+
+	.macro GEN_BR_THUNK reg,ruse=%r1
+	__DECODE_RR __THUNK_PROLOG_BR,\reg,\ruse
+	__THUNK_EX_BR \reg,\ruse
+	__THUNK_EPILOG
+	.endm
+
+	.macro BR_EX reg,ruse=%r1
+557:	__DECODE_RR __THUNK_BR,\reg,\ruse
+	.pushsection .s390_indirect_branches,"a",@progbits
+	.long	557b-.
+	.popsection
+	.endm
+
+	.macro BASR_EX rsave,rtarget,ruse=%r1
+559:	__DECODE_RRR __THUNK_BRASL,\rsave,\rtarget,\ruse
+	.pushsection .s390_indirect_branches,"a",@progbits
+	.long	559b-.
+	.popsection
+	.endm
+
+#else
+	.macro GEN_BR_THUNK reg,ruse=%r1
+	.endm
+
+	 .macro BR_EX reg,ruse=%r1
+	br	\reg
+	.endm
+
+	.macro BASR_EX rsave,rtarget,ruse=%r1
+	basr	\rsave,\rtarget
+	.endm
+#endif
+
+#endif /* __ASSEMBLY__ */
+
+#endif /* _ASM_S390_NOSPEC_ASM_H */
--- a/arch/s390/kernel/entry64.S
+++ b/arch/s390/kernel/entry64.S
@@ -18,6 +18,7 @@
 #include <asm/asm-offsets.h>
 #include <asm/unistd.h>
 #include <asm/page.h>
+#include <asm/nospec-insn.h>
 
 /*
  * Stack layout for the system_call stack entry.
@@ -260,74 +261,16 @@ _TIF_EXIT_SIE = (_TIF_SIGPENDING | _TIF_
 	.popsection
 	.endm
 
-#ifdef CONFIG_EXPOLINE
-
-	.macro GEN_BR_THUNK name,reg,tmp
-	.section .text.\name,"axG",@progbits,\name,comdat
-	.globl \name
-	.hidden \name
-	.type \name,@function
-\name:
-	.cfi_startproc
-#ifdef CONFIG_HAVE_MARCH_Z10_FEATURES
-	exrl	0,0f
-#else
-	larl	\tmp,0f
-	ex	0,0(\tmp)
-#endif
-	j	.
-0:	br	\reg
-	.cfi_endproc
-	.endm
-
-	GEN_BR_THUNK __s390x_indirect_jump_r1use_r9,%r9,%r1
-	GEN_BR_THUNK __s390x_indirect_jump_r1use_r14,%r14,%r1
-	GEN_BR_THUNK __s390x_indirect_jump_r13use_r14,%r14,%r13
-
-	.macro BASR_R14_R9
-0:	brasl	%r14,__s390x_indirect_jump_r1use_r9
-	.pushsection .s390_indirect_branches,"a",@progbits
-	.long	0b-.
-	.popsection
-	.endm
-
-	.macro BR_R1USE_R14
-0:	jg	__s390x_indirect_jump_r1use_r14
-	.pushsection .s390_indirect_branches,"a",@progbits
-	.long	0b-.
-	.popsection
-	.endm
-
-	.macro BR_R13USE_R14
-0:	jg	__s390x_indirect_jump_r13use_r14
-	.pushsection .s390_indirect_branches,"a",@progbits
-	.long	0b-.
-	.popsection
-	.endm
-
-#else	/* CONFIG_EXPOLINE */
-
-	.macro BASR_R14_R9
-	basr	%r14,%r9
-	.endm
-
-	.macro BR_R1USE_R14
-	br	%r14
-	.endm
-
-	.macro BR_R13USE_R14
-	br	%r14
-	.endm
-
-#endif /* CONFIG_EXPOLINE */
-
+	GEN_BR_THUNK %r9
+	GEN_BR_THUNK %r14
+	GEN_BR_THUNK %r14,%r13
 
 	.section .kprobes.text, "ax"
 
 ENTRY(__bpon)
 	.globl __bpon
 	BPON
-	BR_R1USE_R14
+	BR_EX	%r14
 
 /*
  * Scheduler resume function, called by switch_to
@@ -354,7 +297,7 @@ __switch_to:
 	stg	%r5,__LC_THREAD_INFO		# store thread info of next
 	aghi	%r5,STACK_SIZE			# end of kernel stack of next
 	stg	%r5,__LC_KERNEL_STACK		# store end of kernel stack
-	BR_R1USE_R14
+	BR_EX	%r14
 
 __critical_start:
 /*
@@ -404,7 +347,7 @@ sysc_noemu:
 	mvc	SP_ARGS(8,%r15),SP_R7(%r15)
 	lgf	%r9,0(%r7,%r10) # load address of system call routine
 	jnz	sysc_tracesys
-	BASR_R14_R9				# call sys_xxxx
+	BASR_EX	%r14,%r9			# call sys_xxxx
 	stg	%r2,SP_R2(%r15) # store return value (change R2 on stack)
 
 sysc_return:
@@ -524,7 +467,7 @@ sysc_tracego:
 	lmg	%r3,%r6,SP_R3(%r15)
 	mvc	SP_ARGS(8,%r15),SP_R7(%r15)
 	lg	%r2,SP_ORIG_R2(%r15)
-	BASR_R14_R9			# call sys_xxx
+	BASR_EX	%r14,%r9		# call sys_xxx
 	stg	%r2,SP_R2(%r15)		# store return value
 sysc_tracenogo:
 	tm	__TI_flags+6(%r12),_TIF_SYSCALL
@@ -566,7 +509,7 @@ kernel_execve:
 	je	kernel_execve_ok
 	aghi	%r15,SP_SIZE
 	lmg	%r12,%r15,96(%r15)
-	BR_R1USE_R14
+	BR_EX	%r14
 	# execve succeeded.
 kernel_execve_ok:
 	stnsm	__SF_EMPTY(%r15),0xfc	# disable interrupts
@@ -642,7 +585,7 @@ pgm_no_vtime:
 	larl	%r1,pgm_check_table
 	lg	%r9,0(%r8,%r1)		# load address of handler routine
 	la	%r2,SP_PTREGS(%r15)	# address of register-save area
-	BASR_R14_R9			# branch to interrupt-handler
+	BASR_EX	%r14,%r9		# branch to interrupt-handler
 pgm_exit:
 	LOCKDEP_SYS_EXIT
 	tm	SP_PSW+1(%r15),0x01	# returning to user ?
@@ -710,7 +653,7 @@ pgm_no_vtime2:
 	larl	%r1,pgm_check_table
 	lg	%r9,0(%r8,%r1)		# load address of handler routine
 	la	%r2,SP_PTREGS(%r15)	# address of register-save area
-	BASR_R14_R9			# branch to interrupt-handler
+	BASR_EX	%r14,%r9		# branch to interrupt-handler
 pgm_exit2:
 	LOCKDEP_SYS_EXIT
 	tm	SP_PSW+1(%r15),0x01	# returning to user ?
@@ -1180,7 +1123,7 @@ cleanup_critical:
 	clc	8(8,%r12),BASED(cleanup_table_io_restore+8)
 	jl	cleanup_io_restore
 0:
-	BR_R13USE_R14
+	BR_EX	%r14
 
 cleanup_table_system_call:
 	.quad	system_call, sysc_do_svc
@@ -1235,7 +1178,7 @@ cleanup_update:
 0:	mvc	__LC_RETURN_PSW+8(8),BASED(cleanup_table_system_call+8)
 	BPENTER __TI_flags+6(%r12),_TIF_ISOLATE_BP>>8
 	la	%r12,__LC_RETURN_PSW
-	BR_R13USE_R14
+	BR_EX	%r14,%r13
 cleanup_system_call_insn:
 	.quad	sysc_saveall
 	.quad	system_call
@@ -1247,7 +1190,7 @@ cleanup_sysc_tif:
 	mvc	__LC_RETURN_PSW(8),0(%r12)
 	mvc	__LC_RETURN_PSW+8(8),BASED(cleanup_table_sysc_tif)
 	la	%r12,__LC_RETURN_PSW
-	BR_R13USE_R14
+	BR_EX	%r14,%r13
 
 cleanup_sysc_restore:
 	clc	8(8,%r12),BASED(cleanup_sysc_restore_insn)
@@ -1267,7 +1210,7 @@ cleanup_sysc_restore:
 	lmg	%r0,%r10,SP_R0(%r15)
 	lg	%r15,SP_R15(%r15)
 2:	la	%r12,__LC_RETURN_PSW
-	BR_R13USE_R14
+	BR_EX	%r14,%r13
 cleanup_sysc_restore_insn:
 	.quad	sysc_done - 4
 	.quad	sysc_done - 16
@@ -1276,7 +1219,7 @@ cleanup_io_tif:
 	mvc	__LC_RETURN_PSW(8),0(%r12)
 	mvc	__LC_RETURN_PSW+8(8),BASED(cleanup_table_io_tif)
 	la	%r12,__LC_RETURN_PSW
-	BR_R13USE_R14
+	BR_EX	%r14,%r13
 
 cleanup_io_restore:
 	clc	8(8,%r12),BASED(cleanup_io_restore_insn)
@@ -1289,7 +1232,7 @@ cleanup_io_restore:
 	lmg	%r0,%r10,SP_R0(%r15)
 	lg	%r15,SP_R15(%r15)
 1:	la	%r12,__LC_RETURN_PSW
-	BR_R13USE_R14
+	BR_EX	%r14,%r13
 cleanup_io_restore_insn:
 	.quad	io_done - 4
 	.quad	io_done - 16
@@ -1345,7 +1288,7 @@ sie_exit:
 	xgr	%r5,%r5
 	lmg	%r6,%r14,__SF_GPRS(%r15)	# restore kernel registers
 	lghi	%r2,0
-	br	%r14
+	BR_EX	%r14
 sie_fault:
 	lg	%r14,__LC_THREAD_INFO		# pointer thread_info struct
 	ni	__TI_flags+6(%r14),255-(_TIF_SIE>>8)
@@ -1353,7 +1296,7 @@ sie_fault:
 	stmg	%r0,%r13,0(%r14)		# save guest gprs 0-13
 	lmg	%r6,%r14,__SF_GPRS(%r15)	# restore kernel registers
 	lghi	%r2,-EFAULT
-	BR_R1USE_R14
+	BR_EX	%r14
 
 	.align	8
 .Lsie_loop:
