From: Martin Schwidefsky <schwidefsky@de.ibm.com>
Subject: s390/ftrace: use expoline for indirect branches
Patch-mainline: v4.17-rc6
Git-commit: 23a4d7fd34856da8218c4cfc23dba7a6ec0a423a
References: bnc#1106930, LTC#171029

Description:  kernel: improve spectre mitigation
Symptom:      -
Problem:      The upstream kernel has a few more spectre related updates
              and fixes which are relevant for the various distribution
              targets as well. The most notable improvement is the
              etoken support.
Solution:     Backport upstream patches
Reproduction: -

Upstream-Description:

              s390/ftrace: use expoline for indirect branches

              The return from the ftrace_stub, _mcount, ftrace_caller and
              return_to_handler functions is done with "br %r14" and "br %r1".
              These are indirect branches as well and need to use execute
              trampolines for CONFIG_EXPOLINE=y.

              The ftrace_caller function is a special case as it returns to the
              start of a function and may only use %r0 and %r1. For a pre z10
              machine the standard execute trampoline uses a LARL + EX to do
              this, but this requires *two* registers in the range %r1..%r15.
              To get around this the 'br %r1' located in the lowcore is used,
              then the EX instruction does not need an address register.
              But the lowcore trick may only be used for pre z14 machines,
              with noexec=on the mapping for the first page may not contain
              instructions. The solution for that is an ALTERNATIVE in the
              expoline THUNK generated by 'GEN_BR_THUNK %r1' to switch to
              EXRL, this relies on the fact that a machine that supports
              noexec=on has EXRL as well.

              Cc: stable@vger.kernel.org # 4.16
              Fixes: f19fbd5ed6 ("s390: introduce execute-trampolines for branches")
              Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>


Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
Acked-by: Johannes Thumshirn <jthumshirn@suse.de>
---
 arch/s390/include/asm/nospec-insn.h |   13 +++++++++++++
 arch/s390/kernel/asm-offsets.c      |    1 +
 arch/s390/kernel/mcount64.S         |   16 ++++++++++------
 3 files changed, 24 insertions(+), 6 deletions(-)

--- a/arch/s390/include/asm/nospec-insn.h
+++ b/arch/s390/include/asm/nospec-insn.h
@@ -2,10 +2,15 @@
 #ifndef _ASM_S390_NOSPEC_ASM_H
 #define _ASM_S390_NOSPEC_ASM_H
 
+#include <asm/alternative-asm.h>
+#include <asm/asm-offsets.h>
+
 #ifdef __ASSEMBLY__
 
 #ifdef CONFIG_EXPOLINE
 
+_LC_BR_R1 = __LC_BR_R1
+
 /*
  * The expoline macros are used to create thunks in the same format
  * as gcc generates them. The 'comdat' section flag makes sure that
@@ -74,13 +79,21 @@
 	.endm
 
 	.macro __THUNK_EX_BR reg,ruse
+	# Be very careful when adding instructions to this macro!
+	# The ALTERNATIVE replacement code has a .+10 which targets
+	# the "br \reg" after the code has been patched.
 #ifdef CONFIG_HAVE_MARCH_Z10_FEATURES
 	exrl	0,555f
 	j	.
 #else
+	.ifc \reg,%r1
+	ALTERNATIVE "ex %r0,_LC_BR_R1", ".insn ril,0xc60000000000,0,.+10", 35
+	j	.
+	.else
 	larl	\ruse,555f
 	ex	0,0(\ruse)
 	j	.
+	.endif
 #endif
 555:	br	\reg
 	.endm
--- a/arch/s390/kernel/asm-offsets.c
+++ b/arch/s390/kernel/asm-offsets.c
@@ -97,6 +97,7 @@ int main(void)
 	DEFINE(__LC_IO_INT_WORD, offsetof(struct _lowcore, io_int_word));
 	DEFINE(__LC_STFL_FAC_LIST, offsetof(struct _lowcore, stfl_fac_list));
 	DEFINE(__LC_MCCK_CODE, offsetof(struct _lowcore, mcck_interruption_code));
+	OFFSET(__LC_BR_R1, _lowcore, br_r1_trampoline);
 	DEFINE(__LC_DUMP_REIPL, offsetof(struct _lowcore, ipib));
 	BLANK();
 	DEFINE(__LC_RST_NEW_PSW, offsetof(struct _lowcore, restart_psw));
--- a/arch/s390/kernel/mcount64.S
+++ b/arch/s390/kernel/mcount64.S
@@ -7,17 +7,21 @@
 
 #include <asm/asm-offsets.h>
 #include <asm/ftrace.h>
+#include <asm/nospec-insn.h>
+
+	GEN_BR_THUNK %r1
+	GEN_BR_THUNK %r14
 
 	.section .kprobes.text, "ax"
 
 	.globl ftrace_stub
 ftrace_stub:
-	br	%r14
+	BR_EX	%r14
 
 	.globl _mcount
 _mcount:
 #ifdef CONFIG_DYNAMIC_FTRACE
-	br	%r14
+	BR_EX	%r14
 
 	.globl ftrace_caller
 ftrace_caller:
@@ -34,8 +38,8 @@ ftrace_caller:
 	lg	%r3,168(%r15)
 	aghi	%r2,-MCOUNT_INSN_SIZE
 	larl	%r14,ftrace_trace_function
-	lg	%r14,0(%r14)
-	basr	%r14,%r14
+	lg	%r1,0(%r14)
+	BASR_EX	%r14,%r1
 #ifdef CONFIG_FUNCTION_GRAPH_TRACER
 	lg	%r2,168(%r15)
 	lg	%r3,272(%r15)
@@ -50,7 +54,7 @@ ftrace_graph_caller:
 	aghi	%r15,160
 	lmg	%r2,%r5,32(%r15)
 	lg	%r14,112(%r15)
-	br	%r14
+	BR_EX	%r14
 
 #ifdef CONFIG_FUNCTION_GRAPH_TRACER
 
@@ -64,6 +68,6 @@ return_to_handler:
 	aghi	%r15,160
 	lgr	%r14,%r2
 	lmg	%r2,%r5,32(%r15)
-	br	%r14
+	BR_EX	%r14
 
 #endif
