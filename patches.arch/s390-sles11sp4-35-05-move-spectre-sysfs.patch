From: Martin Schwidefsky <schwidefsky@de.ibm.com>
Subject: s390: move spectre sysfs attribute code
Patch-mainline: v4.17-rc6
Git-commit: 4253b0e0627ee3461e64c2495c616f1c8f6b127b
References: bnc#1106930, LTC#171029

Description:  kernel: improve spectre mitigation
Symptom:      -
Problem:      The upstream kernel has a few more spectre related updates
              and fixes which are relevant for the various distribution
              targets as well. The most notable improvement is the
              etoken support.
Solution:     Backport upstream patches
Reproduction: -

Upstream-Description:

              s390: move spectre sysfs attribute code

              The nospec-branch.c file is compiled without the gcc options to
              generate expoline thunks. The return branch of the sysfs show
              functions cpu_show_spectre_v1 and cpu_show_spectre_v2 is an indirect
              branch as well. These need to be compiled with expolines.

              Move the sysfs functions for spectre reporting to a separate file
              and loose an '.' for one of the messages.

              Cc: stable@vger.kernel.org # 4.16
              Fixes: d424986f1d ("s390: add sysfs attributes for spectre")
              Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>


Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
Acked-by: Johannes Thumshirn <jthumshirn@suse.de>
---
 arch/s390/kernel/Makefile        |    1 +
 arch/s390/kernel/nospec-branch.c |   20 --------------------
 arch/s390/kernel/nospec-sysfs.c  |   23 +++++++++++++++++++++++
 3 files changed, 24 insertions(+), 20 deletions(-)

--- a/arch/s390/kernel/Makefile
+++ b/arch/s390/kernel/Makefile
@@ -32,6 +32,7 @@ obj-y	+= $(if $(CONFIG_64BIT),reipl64.o,
 extra-y				+= head.o init_task.o vmlinux.lds
 extra-y				+= $(if $(CONFIG_64BIT),head64.o,head31.o)
 
+obj-$(CONFIG_SYSFS)		+= nospec-sysfs.o
 CFLAGS_REMOVE_nospec-branch.o	+= $(CC_FLAGS_EXPOLINE)
 
 obj-$(CONFIG_MODULES)		+= s390_ksyms.o module.o
--- a/arch/s390/kernel/nospec-branch.c
+++ b/arch/s390/kernel/nospec-branch.c
@@ -54,26 +54,6 @@ static int __init nospec_report(void)
 }
 arch_initcall(nospec_report);
 
-#ifdef CONFIG_SYSFS
-ssize_t cpu_show_spectre_v1(struct device *dev,
-			    struct device_attribute *attr, char *buf)
-{
-	return sprintf(buf, "Mitigation: __user pointer sanitization\n");
-}
-
-ssize_t cpu_show_spectre_v2(struct device *dev,
-			    struct device_attribute *attr, char *buf)
-{
-#ifdef CC_USING_EXPOLINE
-	if (!nospec_disable)
-		return sprintf(buf, "Mitigation: execute trampolines\n");
-#endif
-	if (__test_facility(82, S390_lowcore.alt_stfle_fac_list))
-		return sprintf(buf, "Mitigation: limited branch prediction.\n");
-	return sprintf(buf, "Vulnerable\n");
-}
-#endif
-
 #ifdef CONFIG_EXPOLINE
 
 #ifdef CONFIG_EXPOLINE_OFF
--- /dev/null
+++ b/arch/s390/kernel/nospec-sysfs.c
@@ -0,0 +1,23 @@
+// SPDX-License-Identifier: GPL-2.0
+#include <linux/device.h>
+#include <linux/cpu.h>
+#include <asm/nospec-branch.h>
+#include <asm/system.h>
+
+ssize_t cpu_show_spectre_v1(struct device *dev,
+			    struct device_attribute *attr, char *buf)
+{
+	return sprintf(buf, "Mitigation: __user pointer sanitization\n");
+}
+
+ssize_t cpu_show_spectre_v2(struct device *dev,
+			    struct device_attribute *attr, char *buf)
+{
+#ifdef CC_USING_EXPOLINE
+	if (!nospec_disable)
+		return sprintf(buf, "Mitigation: execute trampolines\n");
+#endif
+	if (__test_facility(82, S390_lowcore.alt_stfle_fac_list))
+		return sprintf(buf, "Mitigation: limited branch prediction\n");
+	return sprintf(buf, "Vulnerable\n");
+}
