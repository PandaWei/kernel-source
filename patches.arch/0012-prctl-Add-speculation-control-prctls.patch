From 347a4781894f92c3df7de1ac5c59736ccbae93ae Mon Sep 17 00:00:00 2001
From: Thomas Gleixner <tglx@linutronix.de>
Date: Sun, 29 Apr 2018 15:20:11 +0200
Subject: prctl: Add speculation control prctls
Patch-mainline: not yet, queued in subsystem tree
References: bsc#1087082 CVE-2018-3639

Add two new prctls to control aspects of speculation related vulnerabilites
and their mitigations to provide finer grained control over performance
impacting mitigations.

PR_GET_SPECULATION_CTRL returns the state of the speculation misfeature
which is selected with arg2 of prctl(2). The return value uses bit 0-2 with
the following meaning:

Bit  Define           Description
0    PR_SPEC_PRCTL    Mitigation can be controlled per task by
                      PR_SET_SPECULATION_CTRL
1    PR_SPEC_ENABLE   The speculation feature is enabled, mitigation is
                      disabled
2    PR_SPEC_DISABLE  The speculation feature is disabled, mitigation is
                      enabled

If all bits are 0 the CPU is not affected by the speculation misfeature.

If PR_SPEC_PRCTL is set, then the per task control of the mitigation is
available. If not set, prctl(PR_SET_SPECULATION_CTRL) for the speculation
misfeature will fail.

PR_SET_SPECULATION_CTRL allows to control the speculation misfeature, which
is selected by arg2 of prctl(2) per task. arg3 is used to hand in the
control value, i.e. either PR_SPEC_ENABLE or PR_SPEC_DISABLE.

The common return values are:

EINVAL  prctl is not implemented by the architecture or the unused prctl()
        arguments are not 0
ENODEV  arg2 is selecting a not supported speculation misfeature

PR_SET_SPECULATION_CTRL has these additional return values:

ERANGE  arg3 is incorrect, i.e. it's not either PR_SPEC_ENABLE or PR_SPEC_DISABLE
ENXIO   prctl control of the selected speculation misfeature is disabled

The first supported controlable speculation misfeature is
PR_SPEC_STORE_BYPASS. Add the define so this can be shared between
architectures.

Based on an initial patch from Tim Chen and mostly rewritten.

Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
Reviewed-by: Ingo Molnar <mingo@kernel.org>
Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
Acked-by: Joerg Roedel <jroedel@suse.de>
---
 include/linux/prctl.h | 11 +++++++++++
 kernel/sys.c          | 20 ++++++++++++++++++++
 2 files changed, 31 insertions(+)

--- a/include/linux/prctl.h
+++ b/include/linux/prctl.h
@@ -120,4 +120,15 @@
 #define PR_SET_THP_DISABLE	41
 #define PR_GET_THP_DISABLE	42
 
+/* Per task speculation control */
+#define PR_GET_SPECULATION_CTRL			52
+#define PR_SET_SPECULATION_CTRL			53
+/* Speculation control variants */
+# define PR_SPEC_STORE_BYPASS			0
+/* Return and control values for PR_SET/GET_SPECULATION_CTRL */
+# define PR_SPEC_NOT_AFFECTED			0
+# define PR_SPEC_PRCTL				(1UL << 0)
+# define PR_SPEC_ENABLE				(1UL << 1)
+# define PR_SPEC_DISABLE			(1UL << 2)
+
 #endif /* _LINUX_PRCTL_H */
--- a/kernel/sys.c
+++ b/kernel/sys.c
@@ -1652,6 +1652,16 @@ SYSCALL_DEFINE1(umask, int, mask)
 	return mask;
 }
 
+int __weak arch_prctl_spec_ctrl_get(unsigned long which)
+{
+	return -EINVAL;
+}
+
+int __weak arch_prctl_spec_ctrl_set(unsigned long which, unsigned long ctrl)
+{
+	return -EINVAL;
+}
+
 SYSCALL_DEFINE5(prctl, int, option, unsigned long, arg2, unsigned long, arg3,
 		unsigned long, arg4, unsigned long, arg5)
 {
@@ -1825,6 +1835,16 @@ SYSCALL_DEFINE5(prctl, int, option, unsi
 				me->mm->def_flags &= ~VM_NOHUGEPAGE;
 			up_write(&me->mm->mmap_sem);
 			break;
+		case PR_GET_SPECULATION_CTRL:
+			if (arg3 || arg4 || arg5)
+				return -EINVAL;
+			error = arch_prctl_spec_ctrl_get(arg2);
+			break;
+		case PR_SET_SPECULATION_CTRL:
+			if (arg4 || arg5)
+				return -EINVAL;
+			error = arch_prctl_spec_ctrl_set(arg2, arg3);
+			break;
 		default:
 			error = -EINVAL;
 			break;
