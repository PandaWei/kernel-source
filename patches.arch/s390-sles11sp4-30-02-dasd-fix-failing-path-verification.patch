From: Jan Höppner <hoeppner@linux.ibm.com>
Subject: s390/dasd: fix failing path verification
Patch-mainline: v4.3-rc1
Git-commit: 1eb38023ddb480276c6b75e0db6463c47251eb7b
References: bnc#1096746, LTC#167649

Description:  s390/dasd: fix failing path verification
Symptom:      Setting several paths online simultaneously using chchp -v 1
              <chpid> may cause some paths not showing up as "path_in_use" for
              a DASD device when issuing lsdasd -l <device>. They are online
              available but not used by the DASD driver.
Problem:      DASD path verification requires the usage of sleep_on_immediatly
              to ensure that no other I/O request is blocking the recovery of
              disconnected devices. Two concurrent path verification workers
              for the same device, however, may kill each others requests due
              to the usage of the immediate sleep_on function. This may lead to
              unsuccessful path verifications and therefore not using all
              available paths.
Solution:     Prevent that two parallel path verification workers conflict with
              each other by implementing a device flag signalling a already
              running worker.
Reproduction: Simply set all available paths offline using chchp -v 0 <chpids>
              and then set them back online using chchp -v 1 <chpids>.
              Afterwards, check the path_in_use attribute for the device in
              question to see if all paths are used.

Upstream-Description:

              s390/dasd: fix failing path verification

              DASD path verification requires the usage of sleep_on_immediatly to
              ensure that no other I/O request is blocking the recovery of
              disconnected devices. But two concurrent path verification workers for
              the same device may kill each others requests due to the usage of the
              immediate sleep_on function. This may lead to unsuccessful path
              verifications.

              Prevent that two parallel path verification workers conflict with
              each other by implementing a device flag signalling a already running
              worker.

              Signed-off-by: Stefan Haberland <stefan.haberland@de.ibm.com>
              Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>


Signed-off-by: Jan Höppner <hoeppner@linux.ibm.com>
Acked-by: Johannes Thumshirn <jthumshirn@suse.de>
---
 drivers/s390/block/dasd_eckd.c |    8 ++++++--
 drivers/s390/block/dasd_int.h  |    1 +
 2 files changed, 7 insertions(+), 2 deletions(-)

--- a/drivers/s390/block/dasd_eckd.c
+++ b/drivers/s390/block/dasd_eckd.c
@@ -1246,7 +1246,11 @@ static void do_path_verification_work(st
 		schedule_work(work);
 		return;
 	}
-
+	/* check if path verification already running and delay if so */
+	if (test_and_set_bit(DASD_FLAG_PATH_VERIFY, &device->flags)) {
+		schedule_work(work);
+		return;
+	}
 	opm = 0;
 	npm = 0;
 	ppm = 0;
@@ -1375,7 +1379,7 @@ static void do_path_verification_work(st
 		device->path_data.tbvpm |= epm;
 		spin_unlock_irqrestore(get_ccwdev_lock(device->cdev), flags);
 	}
-
+	clear_bit(DASD_FLAG_PATH_VERIFY, &device->flags);
 	dasd_put_device(device);
 	if (data->isglobal)
 		mutex_unlock(&dasd_path_verification_mutex);
--- a/drivers/s390/block/dasd_int.h
+++ b/drivers/s390/block/dasd_int.h
@@ -528,6 +528,7 @@ struct dasd_block {
 #define DASD_FLAG_SAFE_OFFLINE	10	/* safe offline processing requested*/
 #define DASD_FLAG_SAFE_OFFLINE_RUNNING	11	/* safe offline running */
 #define DASD_FLAG_ABORTALL	12	/* Abort all noretry requests */
+#define DASD_FLAG_PATH_VERIFY	13	/* Path verification worker running */
 
 
 void dasd_put_device_wake(struct dasd_device *);
