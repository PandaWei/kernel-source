From 2759d9269e132a1151e77cd42cecf85ac64d4480 Mon Sep 17 00:00:00 2001
From: Kees Cook <keescook@chromium.org>
Date: Tue, 1 May 2018 15:07:31 -0700
Subject: seccomp: Enable speculation flaw mitigations
Patch-mainline: not yet, queued in subsystem tree
References: bsc#1087082 CVE-2018-3639

When speculation flaw mitigations are opt-in (via prctl), using seccomp
will automatically opt-in to these protections, since using seccomp
indicates at least some level of sandboxing is desired.

Signed-off-by: Kees Cook <keescook@chromium.org>
Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
Acked-by: Joerg Roedel <jroedel@suse.de>
---
 kernel/seccomp.c | 19 +++++++++++++++++++
 1 file changed, 19 insertions(+)

--- a/kernel/seccomp.c
+++ b/kernel/seccomp.c
@@ -29,6 +29,8 @@
 #include <linux/slab.h>
 #include <linux/tracehook.h>
 #include <linux/uaccess.h>
+#include <linux/nospec.h>
+#include <linux/prctl.h>
 
 /**
  * struct seccomp_filter - container for seccomp BPF programs
@@ -453,6 +455,19 @@ long prctl_get_seccomp(void)
 	return current->seccomp.mode;
 }
 
+/*
+ * If a given speculation mitigation is opt-in (prctl()-controlled),
+ * select it, by disabling speculation (enabling mitigation).
+ */
+static inline void spec_mitigate(struct task_struct *task,
+				 unsigned long which)
+{
+	int state = arch_prctl_spec_ctrl_get(task, which);
+
+	if (state > 0 && (state & PR_SPEC_PRCTL))
+		arch_prctl_spec_ctrl_set(task, which, PR_SPEC_DISABLE);
+}
+
 /**
  * prctl_set_seccomp: configures current->seccomp.mode
  * @seccomp_mode: requested mode to use
@@ -481,12 +496,16 @@ long prctl_set_seccomp(unsigned long sec
 #ifdef TIF_NOTSC
 		disable_TSC();
 #endif
+		/* Assume seccomp processes want speculation flaw mitigation. */
+		spec_mitigate(current, PR_SPEC_STORE_BYPASS);
 		break;
 #ifdef CONFIG_SECCOMP_FILTER
 	case SECCOMP_MODE_FILTER:
 		ret = seccomp_attach_user_filter(filter);
 		if (ret)
 			goto out;
+		/* Assume seccomp processes want speculation flaw mitigation. */
+		spec_mitigate(current, PR_SPEC_STORE_BYPASS);
 		break;
 #endif
 	default:
